package presentacion.vista;

import control.CJugador;
import control.ControlBase;
import entidades.Jugador;
import entidades.Partida;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import modelo.MJugador;
import modelo.MPartida;
import modelo.ModeloBase;

/**
 * Framde para la union de jugadores
 *
 */
public class FUnirse extends FrameBase {

    /**
     * Creates new form FUnirse2
     */
    public FUnirse() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonMenu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        BoxColor = new javax.swing.JComboBox<>();
        jButtonUnirse = new javax.swing.JButton();
        txtnomjugador = new javax.swing.JTextField();

        jButtonMenu.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButtonMenu.setForeground(new java.awt.Color(255, 0, 0));
        jButtonMenu.setText("Menu");
        jButtonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unirse");
        setMinimumSize(new java.awt.Dimension(550, 300));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("Unirse a partida");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(161, 1, 240, 30);

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setText("Escoga su color:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 160, 150, 30);

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel3.setText("Datos del jugador");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 60, 190, 30);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(1, 41, 540, 10);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(6, 244, 550, 10);

        jLabel8.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel8.setText("Escriba su apodo:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 110, 160, 30);

        BoxColor.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        BoxColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Azul", "Rosa", "Rojo", "Verde" }));
        BoxColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxColorActionPerformed(evt);
            }
        });
        getContentPane().add(BoxColor);
        BoxColor.setBounds(200, 170, 140, 30);

        jButtonUnirse.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButtonUnirse.setForeground(new java.awt.Color(102, 255, 102));
        jButtonUnirse.setText("Unirse");
        jButtonUnirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnirseActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonUnirse);
        jButtonUnirse.setBounds(410, 130, 90, 40);
        getContentPane().add(txtnomjugador);
        txtnomjugador.setBounds(200, 110, 140, 30);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuActionPerformed
        this.dispose();
        java.awt.EventQueue.invokeLater(() -> {
            new FInicio().setVisible(true);
        });
    }//GEN-LAST:event_jButtonMenuActionPerformed

    private void jButtonUnirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnirseActionPerformed

//        if (!this.validarCampos()) {
//            String color = ;
        ((CJugador) this.control).unirsePartida(new Jugador(this.txtnomjugador.getText(), BoxColor.getSelectedItem().toString()));
//        }


    }//GEN-LAST:event_jButtonUnirseActionPerformed

    private void BoxColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxColorActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BoxColor;
    private javax.swing.JButton jButtonMenu;
    private javax.swing.JButton jButtonUnirse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtnomjugador;
    // End of variables declaration//GEN-END:variables

    //Metodo que muestra mensaje 
    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje);
    }
//Metodo que muestra la pantallla de llobby

    public void mostrarPantallaLobby(FLobby fLobby) {
        java.awt.EventQueue.invokeLater(() -> {
            fLobby.setVisible(true);
        });
    }
//metodo que valida o ejecutado cuando un jugador ha sido aceptado en una partida, y este a su vez abre el lobby

    @Override                       //Partida
    public void update(Observable o, Object o1) {
        if (o1 == null) {
            this.mostrarMensaje("La union de partida no se ha ejecutado correctamente, contacte a los creadores. ");
        } else {
//            this.dispose();
            Jugador jugador = ((MJugador) o).getJugador();
            this.mostrarMensaje("Se ha unido a una partida; Nombre Escogigo=" + jugador.getNombre() + " Color; " + jugador.getColor());
            if (((Partida) o1).getTotalJugadores() == ((Partida) o1).getJugadores().size()) {
//                
//                ((MPartida) o).deleteObserver(this);
//                FrameBase frameJuego = new FJuego(((MPartida) o).getPartida());
//                frameJuego.establecerControl(this.control);
//                ((MPartida) o).addObserver(frameJuego);
//                this.dispose();
//                java.awt.EventQueue.invokeLater(() -> {
//                    frameJuego.setVisible(true);
//                });

                ModeloBase modeloPartida = new MPartida(((Partida) o1));
                ControlBase controlJugador = new CJugador();
                controlJugador.establecerModelo(modeloPartida);
                controlJugador.establecerCliente(this.control.getCliente());
                controlJugador.getCliente().addObserver((Observer) modeloPartida);
//                FrameBase fLobby = new FLobby(((MPartida) o).getPartida().getMontoJugador(),
//                        ((MPartida) o).getPartida().getMontoApuesta(), ((MPartida) o).getPartida().getTablero().getTamano());
//                modeloPartida.deleteObserver(this);
                this.dispose();
//                fLobby.establecerControl(controlJugador);
//                modeloPartida.addObserver(fLobby);
//                ((FLobby) fLobby).apagarBoton();
//                ((FLobby) fLobby).actualizarLobby(((MPartida) o).getPartida().getJugadores());
//                this.mostrarPantallaLobby((FLobby) fLobby);

//                ModeloBase modeloPartida = new MPartida(((Partida) o1));
//                ((CJugador) this.control).establecerModelo(modeloPartida);
//                this.control.getCliente().addObserver((Observer) modeloPartida);
                FrameBase frameJuego = new FJuego((Partida) o1);
                frameJuego.establecerControl(controlJugador);
                modeloPartida.addObserver(frameJuego);
                java.awt.EventQueue.invokeLater(() -> {
                    frameJuego.setVisible(true);
                });
            } else {

//             Partida partida = ((MPartida) o).getPartida();
//            JOptionPane.showMessageDialog(this, "Usted ha creado una partida; Nombre Escogigo=" + partida.getTurno().getNombre() + " Color; " + partida.getTurno().getColor());
//            ModeloBase modeloPartida = (MPartida) o;
                ModeloBase modeloPartida = new MPartida(((Partida) o1));
                ControlBase controlJugador = new CJugador();
                controlJugador.establecerModelo(modeloPartida);
                controlJugador.establecerCliente(this.control.getCliente());
                controlJugador.getCliente().addObserver((Observer) modeloPartida);
                FrameBase fLobby = new FLobby(((MPartida) o).getPartida().getMontoJugador(),
                        ((MPartida) o).getPartida().getMontoApuesta(), ((MPartida) o).getPartida().getTablero().getTamano());
                modeloPartida.deleteObserver(this);
                this.dispose();
                fLobby.establecerControl(controlJugador);
                modeloPartida.addObserver(fLobby);
                ((FLobby) fLobby).apagarBoton();
                ((FLobby) fLobby).actualizarLobby(((MPartida) o).getPartida().getJugadores());
                this.mostrarPantallaLobby((FLobby) fLobby);
//                this.control = null;

//                ModeloBase modeloPartida = new MPartida(((Partida) o1));
//                ((CJugador) this.control).establecerModelo(modeloPartida);
//                this.control.getCliente().addObserver((Observer) modeloPartida);
//                FrameBase fLobby = new FLobby(((Partida) o1).getMontoJugador(),
//                        ((Partida) o1).getMontoApuesta(), ((Partida) o1).getTablero().getTamano());
//                fLobby.establecerControl(((CJugador) this.control));
//                modeloPartida.addObserver(fLobby);
//                ((FLobby) fLobby).apagarBoton();
//                ((FLobby) fLobby).actualizarLobby(((Partida) o1).getJugadores());
//                this.mostrarPantallaLobby((FLobby) fLobby);
            }
        }
    }
//Metodo que valida la configuración  datos del jugador, si la partida tiene espacios, etc.

//    public boolean validarCampos() {
//        if (this.txtnomjugador.getText().isEmpty()) {
//            this.mostrarMensaje("Establece el nombre del jugador, este no debe de estar vacio");
//            return true;
//        }
//        return false;
//    }
}
